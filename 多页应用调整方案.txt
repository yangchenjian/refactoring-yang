多页应用调整方案


0- 把项目表面的 index.js 移放到 src文件夹中

1- 把src目录修整成3级 components mudules pages
   1.1 弄个index文件夹 main.js 改成 index.js 理由：一个入口的js对应一个html模板文件，这两者名称一致方便后面长期维护，方便webpack打包
   1.2 开始时用 vue-cli生成的单页时的相关页面 通通都拉到index文件夹中去
   1.3 再把index文件夹移动到pages文件夹里面去
   1.4 最终整理后的文件夹一共有3个 分别是 components mudules pages，其中
       components => HelloWorld.vue
       mudules => 空的

       pages => index => App.vue、assets「文件夹」、index.html、index.js、router「文件夹」

2- wenbpack配置也要进行相应的调整
   2.1 打开 build 文件夹中的 webpack.base.conf.js 文件、打开 utils.js文件 添加以下代码 
   ````
   // 多页面应用所添加的东西 多入口文件和多页面输出 start

var glob = require('glob')
// 可以给每个页面单独打包生成一个新的页面
var HtmlWebpackPlugin = require('html-webpack-plugin')
// 设置读取文件的路径
var PAGE_PATH = path.resolve(__dirname, '../src/pages')
// 部分文件合并时需要使用
var merge = require('webpack-merge')

//多入口配置
exports.entries = function() {
  var entryFiles = glob.sync(PAGE_PATH + '/*/*.js')
  var map = {}
  entryFiles.forEach((filePath) => {
    var filename = filePath.substring(filePath.lastIndexOf('\/') + 1, filePath.lastIndexOf('.'))
    map[filename] = filePath
  })
  return map
}

//多页面输出配置
exports.htmlPlugin = function() {
  var entryHtml = glob.sync(PAGE_PATH + '/*/*.html')
  var arr = []
  entryHtml.forEach((filePath) => {
    var filename = filePath.substring(filePath.lastIndexOf('\/') + 1, filePath.lastIndexOf('.'))
    var conf = {
      template: filePath,
      filename: filename + '.html',
      chunks: [filename],
      inject: true
    }
    // 在生产环境中的特定配置
    if (process.env.NODE_ENV === 'production') {
      conf = merge(conf, {
        // 公共部分抽离并且缓存
        chunks: ['manifest', 'vendor', filename],
        minify: {
          // 是否移除注释
          removeComments: true,
          // 是否去除多余的空格
          collapseWhitespace: true,
          // 去除没用的双引号 
          removeAttributeQuotes: true
        },
        chunksSortMode: 'dependency'
      })
    }
    arr.push(new HtmlWebpackPlugin(conf))
  })
  return arr
}


// 多页面应用所添加的东西 end


   ````

3- 修改 webpack.base.conf.js 文件 
   配置webpack.base.conf.js 文件 修改 entry的入口 
    // entry: {
  //   app: './src/main.js'
  // },
  改成  
  entry: utils.entries(),
4- 修改 webpack.dev.conf.js 文件 屏蔽掉 与 HtmlWebpackPlugin 相关的东西，之所以屏蔽掉是因为，在utils文件中已经利用这个插件处理过了，没必要在处理一波了
 4.1
  注释掉
   const HtmlWebpackPlugin = require('html-webpack-plugin')

    注释掉
      new HtmlWebpackPlugin({
           filename: 'index.html',
           template: 'index.html',
           inject: true
         }),

    接着改

    plugins: [xxxxxx] 的后面添加自己的utils方法 
      改成
    plugins: [xxxxxx].concat(utils.htmlPlugin())

5- 修改 webpack.prod.conf.js 文件

注释掉这写代码
   new HtmlWebpackPlugin({
       filename: config.build.index,
       template: 'index.html',
       inject: true,
       minify: {
         removeComments: true,
         collapseWhitespace: true,
         removeAttributeQuotes: true
         // more options:
         // https://github.com/kangax/html-minifier#options-quick-reference
       },
       // necessary to consistently work with multiple chunks via CommonsChunkPlugin
       chunksSortMode: 'dependency'
     }),


接着改

    plugins: [xxxxxx] 的后面添加自己的utils方法 
      改成
    plugins: [xxxxxx].concat(utils.htmlPlugin())


6. 重新在 终端 启动一波就可以了

7. 编译一波看看效果 npm run build 
   7.1 项目文件夹中会有一个 dist 文件夹 里面的内容就是对外要放出来的代码













